
%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: D:\AGH\SEMESTR_6\Elektroniczna aparatura medyczna\Ćwiczenia projektowe\sygnały eam\sygnały eam\na_stole_5kg_iza.ASC
%
% Auto-generated by MATLAB on 06-May-2022 16:12:00

%% Setup the Import Options and import the data
clear all;
close all;

opts = delimitedTextImportOptions("NumVariables", 2);

% Specify range and delimiter
opts.DataLines = [32, Inf];
opts.Delimiter = "\t";

% Specify column names and types
opts.VariableNames = ["MegaWinASCIIfile", "VarName2"];
opts.VariableTypes = ["double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, "MegaWinASCIIfile", "TrimNonNumeric", true);
opts = setvaropts(opts, "MegaWinASCIIfile", "ThousandsSeparator", ",");

% Import the data
nastole_bezobciazenia = readtable("C:\Users\Asus\Desktop\semestr 6\EAM\projekt\eam\Iza\na_stole_bezobciazenia_iza.ASC", opts);
nastojoco_bezobciazenia = readtable("C:\Users\Asus\Desktop\semestr 6\EAM\projekt\eam\Iza\na_stojaco_bezobciazenia_iza.ASC", opts);

%% Convert to output type
nastole_bezobciazenia = table2array(nastole_bezobciazenia);
nastojoco_bezobciazenia = table2array(nastojoco_bezobciazenia);
%% Take only second column
nastole_bezobciazenia = nastole_bezobciazenia(:,2);
nastojoco_bezobciazenia = nastojoco_bezobciazenia(:,2);
%% Clear temporary variables
clear opts
%% OBRÓBKA DANYCH
%% Zero crossing    
time = (1:1:10)

nastole_bezobciazenia_cross = nastole_bezobciazenia(1:10000,:);
nastojoco_bezobciazenia_cross = nastojoco_bezobciazenia(1:10000,:);

first_divide_nastole = buffer(nastole_bezobciazenia_cross, numel(nastole_bezobciazenia_cross)/10); 
counter_nastole = zeros(10,1)
first_divide_nastojoco = buffer(nastojoco_bezobciazenia_cross, numel(nastojoco_bezobciazenia_cross)/10); 
counter_nastojoco = zeros(10,1)

for i = 1:10
    for j = 1:999
        if (first_divide_nastole(j, i) * first_divide_nastole(j+1, i) < 0) | (first_divide_nastole(j, i) * first_divide_nastole(j+1, i) == 0)
            counter_nastole(i) = counter_nastole(i) + 1;
        end
    end
end

for i = 1:10
    for j = 1:999
        if (first_divide_nastojoco(j, i) * first_divide_nastojoco(j+1, i) < 0) | (first_divide_nastojoco(j, i) * first_divide_nastojoco(j+1, i) == 0)
            counter_nastojoco(i) = counter_nastojoco(i) + 1;
        end
    end
end

% figure()
% subplot(1, 2, 1)
% plot(nastole_bezobciazenia_cross)
% title('Surowy sygnał EMG')
% xlabel("Time [ms]")
% ylabel("Amplitude [μV]")
% subplot(1, 2, 2)
% bar(time, counter_nastole)
% title('Częstość występowania amplitudy równej 0 - uginanie łokci bez obciążenia z podparciem')
% xlabel('Czas [s]')
% ylabel('Ilość przekroczeń zer')
% grid on;
% 
% figure()
% subplot(1, 2, 1)
% plot(nastojoco_bezobciazenia_cross)
% title('Surowy sygnał EMG')
% xlabel("Time [ms]")
% ylabel("Amplitude [μV]")
% subplot(1, 2, 2)
% bar(time, counter_nastojoco)
% title('Częstość występowania amplitudy równej 0 - uginanie łokci bez obciążenia bez podparcia')
% xlabel('Czas [s]')
% ylabel('Ilość przekroczeń zer')
% grid on;

figure()
subplot(1, 2, 1)
bar(time, counter_nastole)
sgtitle('Częstość występowania amplitudy równej 0')
legend("Uginanie łokci bez obciążenia z podparciem")
xlabel('Czas [s]')
ylabel('Ilość przekroczeń zer')
ylim([0 120])
grid on;
subplot(1, 2, 2)
bar(time, counter_nastojoco)
legend("Uginanie łokci bez obciążenia bez podparcia")
xlabel('Czas [s]')
ylabel('Ilość przekroczeń zer')
ylim([0 120])
grid on;

% Fourier Transform
L_lo = length(nastole_bezobciazenia);
L_hi = length(nastojoco_bezobciazenia);

fs = 1000; %sampling frequency
f_lo = fs*(0:(L_lo/2))/L_lo; % FFT frequency from 0 to L/2 data length
f_hi = fs*(0:(L_hi/2))/L_hi;

%compute two sided spectrum (-Fmax:Fmax)
p1 = fft(nastole_bezobciazenia);
p2 = fft(nastojoco_bezobciazenia);

%divive by L for normalization of the power of the output 
p1 = abs(p1/L_lo);
p2 = abs(p2/L_hi);

% compute signal sided spectrum
p1=p1(1:L_lo/2+1);
p1(2:end-1) = 2*p1(2:end-1);
p2=p2(1:L_hi/2+1);
p2(2:end-1) = 2*p2(2:end-1);

%Plotting FFT
figure()
subplot(1, 2, 1)
plot(f_lo, p1)
xlabel('Frequency[Hz]')
ylabel('Intensity')
sgtitle('FFT')
legend('Uginanie łokci bez obciążenia z podparciem')
ylim([0 5])
grid on;

subplot(1, 2, 2)
plot(f_hi, p2)
xlabel('Frequency[Hz]')
ylabel('Intensity')
legend("Uginanie łokci bez obciążenia bez podparcia")
ylim([0 5])
grid on;
%% Rectification
nastole_bezobciazenia = abs(nastole_bezobciazenia);
nastojoco_bezobciazenia = abs(nastojoco_bezobciazenia);
%% RMS Mean Power of signal
envelope_lo = zeros(L_lo, 1);
envelope_hi = zeros(L_hi, 1);
window = 100;
envelope_lo = sqrt(movmean(nastole_bezobciazenia.^2, window));
envelope_hi = sqrt(movmean(nastojoco_bezobciazenia.^2, window));
%% Normalization with MVC
MVC_lo = max(nastole_bezobciazenia);
MVC_lo_normalised = zeros(L_lo, 1);
MVC_lo_normalised = envelope_lo./MVC_lo.*100;

MVC_hi = max(nastojoco_bezobciazenia);
MVC_hi_normalised = zeros(L_hi, 1);
MVC_hi_normalised = envelope_hi./MVC_hi.*100;

figure()
plot(nastole_bezobciazenia)
hold on;
plot(envelope_lo, 'r')
xlabel("Time [ms]")
ylabel("Amplitude [μV]")
xlim([0 30000])
title('Normalizacja MVC (nastole_bezobciazenia)')
legend('EMG signal', 'Normalized signal')

figure()
plot(nastojoco_bezobciazenia)
hold on;
plot(envelope_hi, 'r')
xlabel("Time [ms]")
ylabel("Amplitude [μV]")
xlim([0 25000])
title('Normalizacja MVC (nastojoco_bezobciazenia)')
legend('EMG signal', 'Normalized signal')
%% NA STOLE BEZ OBCIĄZENIA - SWOBODNE ZGINANIE

figure()

subplot(3,1,1)
plot((nastole_bezobciazenia),"b")
hold on
xlabel("Time [ms]")
ylabel("Amplitude [μV]")
title("Zginanie swobodne")
legend("sygnał wyjściowy")
xlim([0 30000])

subplot(3,1,2)
nastole_bezobciazenia = abs((nastole_bezobciazenia));
plot((nastole_bezobciazenia),"b")
hold on
%M2 = movmean(nastole_bezobciazenia,200);
M1 = conv2(nastole_bezobciazenia, ones(101,1)/101, 'same');
plot(M1,"g")
xlabel("Time [ms]")
ylabel("Amplitude [μV]")
title("Zginanie swobodne")
legend("moduł z sygnału", "filtracja movingAverage")
xlim([0 30000])

subplot(3,1,3)
plot(M1,"g")
legend("filtracja movingAverage")
xlabel("Time [ms]")
ylabel("Amplitude [μV]")
title("Zginanie swobodne")
xlim([0 30000])

%% NA STOJĄCO BEZ OBCIĄZENIA

figure()

subplot(3,1,1)
plot((nastojoco_bezobciazenia),"b")
hold on
xlabel("Time [ms]")
ylabel("Amplitude [μV]")
title("Zginanie swobodne w pozycji stojącej")
legend("sygnał wyjściowy")
xlim([0 30000])

subplot(3,1,2)
nastojoco_bezobciazenia = abs((nastojoco_bezobciazenia));
plot((nastojoco_bezobciazenia),"b")
hold on
%M2 = movmean(nastole_bezobciazenia,200);
M2 = conv2(nastojoco_bezobciazenia, ones(101,1)/101, 'same');
plot(M2,"g")
xlabel("Time [ms]")
ylabel("Amplitude [μV]")
title("Zginanie swobodne w pozycji stojącej")
legend("moduł z sygnału", "filtracja movingAverage")
xlim([0 30000])

subplot(3,1,3)
plot(M2,"g")
legend("filtracja movingAverage")
xlabel("Time [ms]")
ylabel("Amplitude [μV]")
title("Zginanie swobodne w pozycji stojącej")
xlim([0 30000])

% %% Dopasowanie krzywej do sygnałów movingAverage
% 
% t1 = linspace(0,30000, length(M1));
% % M1 = M1(:,2);
% 
% t2 = linspace(0,30000, length(M2));
% % M2 = M2(:,2);
% 
% 
% %% Initialization.
% 
% % Initialize arrays to store fits and goodness-of-fit.
% fitresult = cell( 2, 1 );
% gof = struct( 'sse', cell( 2, 1 ), ...
%     'rsquare', [], 'dfe', [], 'adjrsquare', [], 'rmse', [] );
% 
% %% Fit: 'untitled fit 1'.
% [xData, yData] = prepareCurveData( t1, M1 );
% 
% % Set up fittype and options.
% ft = fittype( 'sin7' );
% opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
% opts.Display = 'Off';
% opts.Lower = [-Inf 0 -Inf -Inf 0 -Inf -Inf 0 -Inf -Inf 0 -Inf -Inf 0 -Inf -Inf 0 -Inf -Inf 0 -Inf];
% opts.StartPoint = [63.0484769747281 0.00010471975511966 0.0453424533605171 30.2844167262031 0.00020943951023932 1.68790600972163 11.9142151386316 0.00356047167406843 0.675712240713161 8.2321251283702 0.000418879020478639 1.39148362206547 7.69526272671576 0.00314159265358979 2.99537027510019 7.30916399419768 0.00335103216382911 2.84193509684937 6.95515129933297 0.00733038285837618 -0.738225360902395];
% 
% % Fit model to data.
% [fitresult1, gof(1)] = fit( xData, yData, ft, opts );
% 
% % Plot fit with data.
% figure( 'Name', 'untitled fit 1' );
% h = plot( fitresult1);
% legend( h, 'M1 vs. t1', 'untitled fit 1', 'Location', 'NorthEast', 'Interpreter', 'none' );
% % Label axes
% xlabel( 't1', 'Interpreter', 'none' );
% ylabel( 'M1', 'Interpreter', 'none' );
% grid on
% 
% %% Fit: 'untitled fit 4'.
% [xData, yData] = prepareCurveData( t2, M2 );
% 
% % Set up fittype and options.
% ft = fittype( 'sin6' );
% opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
% opts.Display = 'Off';
% opts.Lower = [-Inf 0 -Inf -Inf 0 -Inf -Inf 0 -Inf -Inf 0 -Inf -Inf 0 -Inf -Inf 0 -Inf];
% opts.Normalize = 'on';
% opts.StartPoint = [63.166395397142 0.906911021284543 1.55077289808159 26.7276833276025 1.81382204256909 -1.56102211730582 13.4362627802426 54.4146612770726 -1.2309676480785 8.36660554739902 56.2284833196417 -2.6096376942892 7.03886373466611 50.7870171919344 2.27113327144735 6.79225039984112 52.6008392345035 -1.77254888962499];
% 
% % Fit model to data.
% [fitresult2, gof(2)] = fit( xData, yData, ft, opts );
% 
% % Plot fit with data.
% figure( 'Name', 'untitled fit 4' );
% h = plot( fitresult2);
% legend( h, 'M2 vs. t2', 'untitled fit 4', 'Location', 'NorthEast', 'Interpreter', 'none' );
% % Label axes
% xlabel( 't2', 'Interpreter', 'none' );
% ylabel( 'M2', 'Interpreter', 'none' );
% grid on
% 
% %% 
% 
% plot( fitresult1, "r")
% hold on
% plot( fitresult2, "b")
% legend("Zginanie swobodne", "Zginanie swobodne w pozycji stojącej")
% xlabel("Time [ms]")
% ylabel("Amplitude [μV]")
% 
% grid on
% hold off

